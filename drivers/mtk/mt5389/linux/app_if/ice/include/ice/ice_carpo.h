
/**
 * Copyright 2009 Cabot Communications.  All rights reserved.
 *
 * @file
 * @brief  ICE Interface for Carpo
 *
 */

#ifndef CABOT_ICE_ICE_CARPO_H_INCLUDED
#define CABOT_ICE_ICE_CARPO_H_INCLUDED

#include "frost/frost_basictypes.h"
#include "frost/frost_time.h"
#include "ice/ice_filesystem.h"

#define PING_SUCCESS   0
#define PING_ERROR     1
#define PING_BUSY      2

#define FTP_DOWNLOAD_SUCCESS  0
#define FTP_DOWNLOAD_ERROR    1
#define FTP_DOWNLOAD_BUSY     2

#define CARPO_DOWNLOAD_SUCCESS  0
#define CARPO_DOWNLOAD_ERROR    1

#ifdef __cplusplus
extern "C" {
#endif

typedef enum
{
    FTP = 0,
    FTPS,
    FTPWIN,
    ALL_DOWNLOAD_TYPES
}web_server_type_t;

/**
 * @brief Downloads the file via ftp.
 *
 * @param server_id Server ID which to request file download
 * @param file_name Name of the file to open.
 *
 * @return Returns the error state for download request
 */
frost_uint32 ICE_CarpoDownload(frost_uint32 server_id, const char* file_name);

/**
 * @brief Generates the file location of the downloaded file.
 *
 * Temporary file path in file system where downladed data is
 * generatede by adding default internet temporary base path and file_name
 * which comes from DCF file. Generated file path array is retured back
 * including the file name.
 *
 * @param file_name File name info as defined in DCF file
 *
 * @return Returns the pointer for the generated file path information
 * including file name.
 */
const char * ICE_CarpoGetLocalFilePathAndName(const char* file_name);

/**
 * @brief Generates the file location of the downloaded file.
 *
 * Temporary file path in file system where downladed data is
 * generated by adding default internet temporary base path and file_name
 * which comes from DCF file. Generated file path array is retured back.
 *
 * @param file_name File name info as defined in DCF file
 *
 * @return Returns the pointer for the generated file path information
 */
const char * ICE_CarpoGetLocalFilePath(const char* file_name);

/**
 * @brief Interface to delete web downloaded files
 *
 * Called by Cabot code to request delete downloaded tmp file
 * In ice layer normally download folder should be mapped to ram area. In order
 * not to waste resources this ram area shoul be cleared after file is processed.
 *
 * @param file_name file name with full path to be deleted.
 */
void ICE_CarpoDeleteDownloadedFile(const char* file_name);

/**
 * @brief Check for download server availablility
 *
 * @param server_id Server ID which to check connection
 *
 * @return Returns true if selected server is found
 */
frost_bool ICE_CarpoCheckServerConnection(frost_uint32 server_id);

/**
 * @brief Returns number of registered update servers
 *
 * @return Returns number of registered update servers. -1 if an error occured
 */
frost_uint32 ICE_CarpoGetRegisteredUpdateServerCount(void);

/**
 * @brief Returns the status of download service called by ICE Carpo
 *
 * @return Returns true if downloading a file, false otherwise
 */
frost_bool ICE_CarpoIsDownloadActive(void);

/**
 * @brief Returns current file size of actively downloading file. It is used to
 * track the download status and errors occured, it may be used to detect a
 * dead-lock in download service activity.
 *
 * @return Returns -1 if currently no download is active, file size otherwise
 */
frost_uint32 ICE_CarpoGetActiveDownloadFileSize(void);

/**
 * @brief Stop download mechanism is it is active
 *
 */
void ICE_CarpoStopActiveDownloadAction(void);

/**
 * @brief Read data from RAM memory for the purpose of early error detection
 *
 *
 * Called by Eclipse to read a sequence of bytes from RAM memory.  Eclipse
 * will call this function when background search mode is active in first_pass_mode
 * In this mode all image chunks are downloaded to RAM and verified. If all image
 * chunk files are verified, background search will continue with second_pass_mode.
 *
 * This function is called to read back the binary image in small sections.
 *
 * @param data_to_read  Start address of the data to be read.
 * @param data_size     Length of data to be read.
 * @param source        Address in flash to start reading data
 *                      (can be absolute or relative depending upon the value
 *                      of the <code>relative</code> parameter).
 * @param relative      #frost_true indicates source is relative
 *                      to the start of the image area that the implementation
 *                      is updating.
 *                      #frost_false indicates source is an absolute
 *                      address in flash memory.
 *
 * @return #frost_true if data was successfully read, #frost_false if
 *         arguments were rejected or the function is not implemented.
 */
frost_bool ICE_CarpoReadBytesFromRam(frost_uint8* data_to_read,
                                          frost_ulong data_size,
                                          frost_ulong source,
                                          frost_bool relative);

/**
 * @brief Wrapper for curl library main init function
 *
 * @return 0 if success, value > 0 in error case.
 *
 * TODO: Should be moved to its own ice file!
 **/
frost_uint32 ICE_CurlGlobalInit(void);

#ifdef __cplusplus
}
#endif

#endif /*CABOT_ICE_ICE_CARPO_H_INCLUDED*/

