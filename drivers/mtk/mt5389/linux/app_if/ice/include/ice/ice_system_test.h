/**
 * Copyright 2002-3 Cabot Communications.  All rights reserved.
 *
 * @file
 *
 * @brief Cabot's interface from the Eclipse system to perform
 * system tests.
 *
 */

#ifndef CABOT_ICE_ICE_SYSTEM_TEST_H_INCLUDED
#define CABOT_ICE_ICE_SYSTEM_TEST_H_INCLUDED

#include "frost/frost_basictypes.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Pass the result of a system test to the Eclipse core for 
 * processing.
 *
 * This is a call made by the ICE-implementation into the Eclipse core.
 *
 * @param success #frost_bool value indicating whether the test has been 
 * successful or not.
 * @param result Null-terminated char array to pass back any extra test
 * results. If no string-based results are generated by the test this can
 * be set to null. Note: Eclipse will make a copy of this data.
 * @param user_data Pointer to data that was passed in when the callback
 *        was registered.
 */
typedef void (*ICE_SystemTestCallbackFunction)(frost_bool success,
                                               const char * result,
                                               void * user_data);
/**
 * @brief Start a platform-specific service test.
 *
 * This function is optional and implementations that do not require system
 * test functionality may always return #frost_false
 *
 * Eclipse will only start one test at a time and will not attempt to call 
 * this function if the result of a previously started test has not been 
 * received yet.
 *
 * @param test_id Integer value representing the ID of the test to be 
 * started. The ICE implementer should inform the UI application writer
 * about the meaning of this value. The value of -1 is reserved and
 * should not be used by ICE implementations.
 * @param function The function to be called to pass service test results to.
 * This function must be called exactly once for every test that can be
 * successfully started. Will not be null.
 * @param test_parameters Parameters for the test. The precise meaning
 * of this pointer should be defined by the ICE implementer.  This 
 * information should be made available to the UI application writer 
 * so that the parameters can be set correctly by the application.
 * @param user_data Data to be passed to the ICE_SystemTestCallbackFunction.
 *
 * @return #frost_true if the test with the given ID exists and can be
 * started, #frost_false otherwise.
 */
frost_bool ICE_SystemTestStart(frost_int test_id,
                               ICE_SystemTestCallbackFunction function,
                               void * test_parameters,
                               void * user_data);

/**
 * @brief Cancels the currently running system test.
 *
 * This function is optional and implementations that do not require system
 * test functionality may immediately return.
 *
 * If a system test is running, this function will cancel it. Otherwise,
 * this function will have no effect. After the system test is cancelled,
 * it is not necessary to call the callback.
 */
void ICE_SystemTestCancel(void);

#ifdef __cplusplus
}
#endif

#endif /* CABOT_ICE_ICE_SYSTEM_TEST_H_INCLUDED*/

